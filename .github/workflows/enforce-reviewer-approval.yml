name: Enforce Reviewer Approvals

on:
  pull_request:
    types: [review_requested, review_request_removed, submitted, synchronize, opened]
  pull_request_review:
    types: [submitted, edited, dismissed]
    
permissions:
  pull-requests: read
  checks: write

jobs:
  cancel-previous-runs:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.12.0
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}
          
  check-reviewers:
    runs-on: ubuntu-latest
    needs: cancel-previous-runs
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.12.0
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}
    
      - name: Delay execution for 5 seconds
        run: sleep 5
        
      - name: Check required approvals
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // Fetch all requested reviewers (users only, ignoring teams)
            const { data: requestedReviewers } = await github.rest.pulls.listRequestedReviewers({
              owner,
              repo,
              pull_number: prNumber
            });

            const requiredReviewers = new Set(requestedReviewers.users.map(user => user.login));

            // Fetch all reviews for this PR
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner,
              repo,
              pull_number: prNumber
            });

            // Fetch all review requests (to track re-reviews)
            const { data: timeline } = await github.rest.issues.listEventsForTimeline({
              owner,
              repo,
              issue_number: prNumber
            });

            // Track who has been re-requested for review
            const reRequestedReviewers = new Set();
            for (const event of timeline) {
              if (event.event === "review_requested") {
                reRequestedReviewers.add(event.requested_reviewer.login);
              }
            }

            // Track latest review states per reviewer
            const latestReviews = new Map();
            for (const review of reviews) {
              latestReviews.set(review.user.login, review.state);
            }

            // Determine if all assigned reviewers have approved (taking re-requests into account)
            let allApproved = true;
            for (const reviewer of requiredReviewers) {
              const reviewState = latestReviews.get(reviewer);
              
              // If a reviewer was re-requested, ignore old approvals
              if (reRequestedReviewers.has(reviewer) || reviewState !== "APPROVED") {
                allApproved = false;
                break;
              }
            }

            if (allApproved) {
              console.log("✅ All required reviewers have approved.");
            } else {
              console.log("❌ Not all required reviewers have approved.");
              core.setFailed("Pull request cannot be merged until all requested reviewers approve.");
            }
