name: Enforce Reviewer Approvals

on:
  pull_request:
    types: [review_requested, review_request_removed, submitted, synchronize, opened]

permissions:
  pull-requests: read
  checks: write

jobs:
  check-reviewers:
    runs-on: ubuntu-latest
    steps:
      - name: Check required approvals
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            async function wait(ms) {
              return new Promise(resolve => setTimeout(resolve, ms));
            }

            async function getReviewData() {
              const prNumber = context.payload.pull_request.number;
              const owner = context.repo.owner;
              const repo = context.repo.repo;

              // Fetch requested reviewers
              const { data: requestedReviewers } = await github.rest.pulls.listRequestedReviewers({
                owner,
                repo,
                pull_number: prNumber
              });

              const requiredReviewers = new Set(requestedReviewers.users.map(user => user.login));

              // Fetch all reviews for this PR
              const { data: reviews } = await github.rest.pulls.listReviews({
                owner,
                repo,
                pull_number: prNumber
              });

              // Fetch all timeline events (to check review re-requests)
              const { data: timeline } = await github.rest.issues.listEventsForTimeline({
                owner,
                repo,
                issue_number: prNumber
              });

              // Track who has been re-requested for review
              const reRequestedReviewers = new Set();
              for (const event of timeline) {
                if (event.event === "review_requested" && event.requested_reviewer) {
                  reRequestedReviewers.add(event.requested_reviewer.login);
                }
              }

              // Track the latest review state per reviewer
              const latestReviews = new Map();
              for (const review of reviews) {
                latestReviews.set(review.user.login, review.state);
              }

              return { requiredReviewers, latestReviews, reRequestedReviewers };
            }

            async function enforceApprovalCheck(attempt = 1) {
              console.log(`🔄 Fetching latest review data (Attempt ${attempt})...`);

              let { requiredReviewers, latestReviews, reRequestedReviewers } = await getReviewData();

              let allApproved = true;
              for (const reviewer of requiredReviewers) {
                const reviewState = latestReviews.get(reviewer);

                // If a reviewer was re-requested, ignore old approvals
                if (reRequestedReviewers.has(reviewer) || reviewState !== "APPROVED") {
                  allApproved = false;
                  break;
                }
              }

              if (allApproved) {
                console.log("✅ All required reviewers have approved.");
              } else if (attempt < 2) {
                console.log("⏳ Waiting before retrying to ensure GitHub has updated approvals...");
                await wait(5000); // Wait 5 seconds before retrying
                return enforceApprovalCheck(attempt + 1);
              } else {
                console.log("❌ Not all required reviewers have approved.");
                core.setFailed("Pull request cannot be merged until all requested reviewers approve.");
              }
            }

            await enforceApprovalCheck();
