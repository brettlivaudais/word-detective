name: PR Approval Requirements

on:
  pull_request:
    types: [opened, reopened, review_requested, review_request_removed]
  pull_request_review:
    types: [submitted, dismissed]

jobs:
  check-approvals:
    name: Check All Reviewers Approved
    runs-on: ubuntu-latest
    steps:
      - name: Check if all reviewers approved
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo, number } = context.issue;
            
            // Get PR data including requested reviewers
            const pr = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: number
            });

            // Get all reviews for this PR
            const reviews = await github.rest.pulls.listReviews({
              owner,
              repo,
              pull_number: number
            });
            
            // Get the latest review from each reviewer
            const latestReviews = {};
            reviews.data.forEach(review => {
              // Only count APPROVED or CHANGES_REQUESTED states
              if (review.state === 'APPROVED' || review.state === 'CHANGES_REQUESTED') {
                latestReviews[review.user.login] = review;
              }
            });
            
            // Collect requested reviewers (both users and teams)
            const requestedReviewers = [];
            
            // Add individual reviewers
            if (pr.data.requested_reviewers) {
              pr.data.requested_reviewers.forEach(reviewer => {
                requestedReviewers.push(reviewer.login);
              });
            }
            
            // Add team reviewers (if you have team-level reviews)
            if (pr.data.requested_teams) {
              pr.data.requested_teams.forEach(team => {
                requestedReviewers.push(`team:${team.slug}`);
              });
            }
            
            // Check assigned reviewers
            let allApproved = true;
            let notApprovedReviewers = [];
            
            for (const reviewer of requestedReviewers) {
              // Skip team reviewers in this simple implementation
              if (reviewer.startsWith('team:')) {
                console.log(`Team reviewer: ${reviewer} - skipping check`);
                continue;
              }
              
              if (!latestReviews[reviewer] || latestReviews[reviewer].state !== 'APPROVED') {
                allApproved = false;
                notApprovedReviewers.push(reviewer);
              }
            }
            
            // Set PR status based on approval state
            const statusContext = 'PR Approvals Check';
            let statusState, statusDescription;
            
            if (requestedReviewers.length === 0) {
              statusState = 'success';
              statusDescription = 'No reviewers requested for this PR';
            } else if (allApproved) {
              statusState = 'success';
              statusDescription = 'All requested reviewers have approved this PR';
            } else {
              statusState = 'pending';
              statusDescription = `Waiting for approval from: ${notApprovedReviewers.join(', ')}`;
            }
            
            // Create commit status
            await github.rest.repos.createCommitStatus({
              owner,
              repo,
              sha: pr.data.head.sha,
              state: statusState,
              description: statusDescription,
              context: statusContext
            });
            
            console.log(`PR #${number} approval status: ${statusDescription}`);
