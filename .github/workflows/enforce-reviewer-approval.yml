name: Enforce Reviewer Approvals

on:
  pull_request:
    types: [review_requested, review_request_removed, synchronize, opened]
  pull_request_review:
    types: [submitted, edited, dismissed]

permissions:
  pull-requests: write
  checks: write
  actions: write

jobs:
  cancel-previous-runs:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs for This PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const currentRunId = context.runId;
            const branch = context.payload.pull_request ? context.payload.pull_request.head.ref : null;
            
            if (!branch) {
              console.log("‚ö†Ô∏è Not a PR event, skipping cancellation.");
              return;
            }

            console.log(`üîÑ Fetching all previous workflow runs on branch: ${branch}...`);

            let page = 1;
            let perPage = 100;
            let allRuns = [];

            while (true) {
              const { data: runs } = await github.rest.actions.listWorkflowRunsForRepo({
                owner,
                repo,
                per_page: perPage,
                page: page
              });

              if (runs.workflow_runs.length === 0) break;
              allRuns = allRuns.concat(runs.workflow_runs);
              page++;
            }

            let cancelled = 0;
            for (const run of allRuns) {
              if (
                run.id !== currentRunId &&
                run.head_branch === branch &&
                run.status !== "completed"
              ) {
                console.log(`üõë Cancelling previous workflow run: ${run.id}`);
                await github.rest.actions.cancelWorkflowRun({
                  owner,
                  repo,
                  run_id: run.id
                });
                cancelled++;
              }
            }

            console.log(cancelled > 0 
              ? `‚úÖ Cancelled ${cancelled} previous runs.` 
              : "‚úÖ No previous runs found to cancel.");
  
  check-reviewers:
    runs-on: ubuntu-latest
    needs: cancel-previous-runs
    steps:
      - name: Override Old Failed Checks
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const sha = context.sha;

            console.log("‚úÖ Marking old checks as success to clear failures...");

            await github.rest.checks.create({
              owner,
              repo,
              name: "Enforce Reviewer Approvals",
              head_sha: sha,
              status: "completed",
              conclusion: "success",
              output: {
                title: "Invalidating Old Failed Checks",
                summary: "Previous failures are cleared because a newer check has passed."
              }
            });

      - name: Check Required Approvals
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // Fetch all requested reviewers
            const { data: requestedReviewers } = await github.rest.pulls.listRequestedReviewers({
              owner,
              repo,
              pull_number: prNumber
            });

            const requiredReviewers = new Set(requestedReviewers.users.map(user => user.login));

            // Fetch all reviews
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner,
              repo,
              pull_number: prNumber
            });

            // Fetch timeline events (track re-review requests)
            const { data: timeline } = await github.rest.issues.listEventsForTimeline({
              owner,
              repo,
              issue_number: prNumber
            });

            const reRequestedReviewers = new Set();
            for (const event of timeline) {
              if (event.event === "review_requested" && event.requested_reviewer) {
                reRequestedReviewers.add(event.requested_reviewer.login);
              }
            }

            // Track latest review states
            const latestReviews = new Map();
            for (const review of reviews) {
              latestReviews.set(review.user.login, review.state);
            }

            // Check if all required reviewers have approved
            let allApproved = true;
            for (const reviewer of requiredReviewers) {
              if (reRequestedReviewers.has(reviewer) || latestReviews.get(reviewer) !== "APPROVED") {
                allApproved = false;
                break;
              }
            }

            if (allApproved) {
              console.log("‚úÖ All required reviewers have approved.");
            } else {
              console.log("‚ùå Not all required reviewers have approved.");
              core.setFailed("Pull request cannot be merged until all requested reviewers approve.");
            }
