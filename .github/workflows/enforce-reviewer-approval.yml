name: PR Approval Requirements

on:
  pull_request:
    types: [opened, reopened, review_requested, review_request_removed]
  pull_request_review:
    types: [submitted, dismissed]

permissions:
  contents: read
  pull-requests: read
  statuses: write

jobs:
  check-approvals:
    name: Check All Reviewers Approved
    runs-on: ubuntu-latest
    steps:
      - name: Check if all reviewers approved
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo, number } = context.issue;
            
            // Get PR data including requested reviewers
            const pr = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: number
            });

            // Get all reviews for this PR
            const reviews = await github.rest.pulls.listReviews({
              owner,
              repo,
              pull_number: number
            });
            
            // Get the latest review from each reviewer
            const latestReviews = {};
            reviews.data.forEach(review => {
              // Only count completed reviews (not COMMENTED or PENDING)
              if (review.state === 'APPROVED' || review.state === 'CHANGES_REQUESTED') {
                // Store the latest review by submission time
                if (!latestReviews[review.user.login] || 
                    new Date(review.submitted_at) > new Date(latestReviews[review.user.login].submitted_at)) {
                  latestReviews[review.user.login] = review;
                }
              }
            });
            
            // Get requested reviewers
            const requestedReviewersData = await github.rest.pulls.listRequestedReviewers({
              owner,
              repo,
              pull_number: number
            });
            
            // Collect all reviewers (both requested and those who have reviewed)
            const allReviewers = new Set();
            
            // Add individual requested reviewers
            if (requestedReviewersData.data.users) {
              requestedReviewersData.data.users.forEach(reviewer => {
                allReviewers.add(reviewer.login);
              });
            }
            
            // Add all reviewers who have already submitted a review
            Object.keys(latestReviews).forEach(reviewer => {
              allReviewers.add(reviewer);
            });
            
            // Check if any reviewers have pending re-reviews requested
            // A re-review is needed if they're in the requested reviewers list AND
            // they have a previous approval
            const needsReReview = [];
            const notYetApproved = [];
            
            for (const reviewer of allReviewers) {
              // Check if reviewer is currently requested
              const isCurrentlyRequested = requestedReviewersData.data.users.some(
                user => user.login === reviewer
              );
              
              // Check if they previously approved
              const hasApproved = latestReviews[reviewer] && 
                                 latestReviews[reviewer].state === 'APPROVED';
              
              // If they are requested and had previously approved, they need to re-review
              if (isCurrentlyRequested && hasApproved) {
                needsReReview.push(reviewer);
              }
              // If they are requested and haven't approved yet
              else if (isCurrentlyRequested && !hasApproved) {
                notYetApproved.push(reviewer);
              }
              // If they're not in the requested list but also haven't approved
              else if (!isCurrentlyRequested && (!latestReviews[reviewer] || 
                      latestReviews[reviewer].state !== 'APPROVED')) {
                notYetApproved.push(reviewer);
              }
            }
            
            // Set PR status based on approval state
            const statusContext = 'PR Approvals Check';
            let statusState, statusDescription;
            
            if (allReviewers.size === 0) {
              statusState = 'success';
              statusDescription = 'No reviewers requested for this PR';
            } else if (needsReReview.length > 0) {
              statusState = 'pending';
              statusDescription = `Re-review needed from: ${needsReReview.join(', ')}`;
            } else if (notYetApproved.length > 0) {
              statusState = 'pending';
              statusDescription = `Waiting for approval from: ${notYetApproved.join(', ')}`;
            } else {
              statusState = 'success';
              statusDescription = 'All requested reviewers have approved this PR';
            }
            
            // Create commit status
            await github.rest.repos.createCommitStatus({
              owner,
              repo,
              sha: pr.data.head.sha,
              state: statusState,
              description: statusDescription,
              context: statusContext
            });
            
            console.log(`PR #${number} approval status: ${statusDescription}`);
